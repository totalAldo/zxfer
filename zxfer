#!/bin/sh
# BSD HEADER START
# This file is part of zxfer project.

# Copyright (c) 2024 Aldo Gonzalez
# Copyright (c) 2013-2019 Allan Jude <allanjude@freebsd.org>
# Copyright (c) 2010,2011 Ivan Nash Dreckman
# Copyright (c) 2007,2008 Constantin Gonzalez
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# BSD HEADER END

#
# zxfer
#
# Transfer a source zfs filesystem, directory or files to a destination, using
# either zfs send/receive or rsync to do the heavy lifting.

# 2024.03 refactoring by Aldo Gonzalez

# Comments, suggestions, bug reports please to:
# Allan Jude  <allanjude a-t freebsd d-o-t org>
#

# Acknowledgments
# Thanks to Ivan Nash Dreckman for creating zxfer and writing good documentation
# which resulted in zxfer being the most useful of the available tools
#
# Thanks to Constantin Gonzalez (original author of zfs-replicate) for
# the generous permission and licensing of his script zfs-replicate which
# (version 0.7) was used as the basis for this script. Thanks in turn to
# those who contributed to his script.

# Also thanks very much to Constantin for his encouragement, support and
# collaboration along the way. His advice on various decision paths has been
# invaluable.

# Background
# This script is a merge of two scripts - one of my own using Constantin's
# as a template, and my extensively modified version of his zfs-replicate
# script.

# There were two different use cases that lead to both being developed. One
# was an extension of zfs-replicate - I wanted to be able to easily back up
# a whole storage pool to a HDD via an e-SATA dock, with one command. I
# wanted an exact replica of that pool, including snapshots and properties.

# The other use case was to backup a SSD based root mirror to a larger
# HDD based storage pool. It needed atomicity and it needed to be independent
# of snapshots, because I was keeping most of the snapshots on the HDD based
# pool. For this I used rsync.

# In both cases I wanted the reliability that comes with checking hashes
# and checksums against the original files to ensure that the correct
# information had been written, and AFAIK both tools to do this.

# Since then, the scripts have been merged, and the number of features has
# increased. I hope you find it useful.

# Known bugs/gotchas:
# 2024.03.09
# - The -D option does not work as expected when creating a dataset on the target
#
# (This is a bug of ZFS on FreeBSD and not this script.)
# There are several properties in FreeBSD that when set via "zfs create"
# or "zfs set" will have the source stay as default while others are
# set to local. This does not have any real impacts because these properties
# are not inheritable. See definition for $g_fbsd_readonly_properties.

#
# Print out usage information
#
usage() {
    cat <<EOT
usage:
     zxfer [-dFnPsUvVwY] [-k | -e] [-b | -B] {-N path/to/src | -R path/to/src}
           [-z] [-Z "full zstd compression command"]
           [-m [c FMRI|pattern[ FMRI|pattern]...]]] [-O user@host]
           [-D 'progress dialog options'] [-I properties,to,ignore]
           [-T user@host] [-o option1=value1,option2=value2...] [-g days]
           destination
     zxfer {-S} [-dilpPnv] [-k | -e] [-b | -B] [-f /path/to/rsfile]
           {-R /path/to/src1,path/to/src2... | -N /path/to/src1,path/to/src2...}
           [-o option1=value1,option2=value2...] [-E pattern] [-L value]
           [-u snapshot] destination
     zxfer [-h]

           Where destination is a ZFS filesystem e.g.  poolname/fsname

zxfer has a man page that explains each of the options in detail, along with
usage examples. To access the man page, type:
$ man zxfer

EOT
}

###############################################################################
# MAIN
###############################################################################

# Source other scripts from this project
dir=$(dirname "$0")
. "$dir"/src/zxfer_common.sh
. "$dir"/src/zxfer_globals.sh
. "$dir"/src/zxfer_transfer_properties.sh

. "$dir"/src/zxfer_zfs_mode.sh
. "$dir"/src/zxfer_get_zfs_list.sh
. "$dir"/src/zxfer_zfs_send_receive.sh
. "$dir"/src/zxfer_inspect_delete_snap.sh

. "$dir"/src/zxfer_rsync_mode.sh

init_globals

read_command_line_switches "$@"

# Read out source and dest values
shift "$((OPTIND - 1))"
g_destination=$1

# Basic consistency checking
if [ $# -lt 1 ]; then
    throw_usage_error "Need a destination."
fi

init_variables

consistency_check

if [ $g_option_S_rsync_mode -eq 1 ]; then
    run_rsync_mode
else
    l_num_iterations=0

    # run this in a loop until there are no more zfs send or zfs destroy commands
    # that are issued
    while true; do
        # if a send or destroy command is performed, set this to 1 indicating
        # that a change was made during run_zfs_mode
        g_is_performed_send_destroy=0

        l_num_iterations=$((l_num_iterations + 1))
        echov "Begin Iteration[$l_num_iterations of $g_option_Y_yield_iterations]. Running in zfs send/receive mode."

        run_zfs_mode

        echov "End Iteration[$l_num_iterations of $g_option_Y_yield_iterations]."

        # check if we need to perform another iteration
        if [ "$g_is_performed_send_destroy" -eq 0 ]; then
            echov "Exiting loop. No send or destroy commands were performed during last iteration."
            break
        fi
        if [ "$l_num_iterations" -ge "$g_option_Y_yield_iterations" ]; then
            if [ "$g_option_Y_yield_iterations" -ge "$g_MAX_YIELD_ITERATIONS" ]; then
                echov "Exiting loop. Reached maximum number of iterations.
If consistently not completing replication in allotted iterations,
consider using compression, increasing bandwidth, increasing I/O or reducing snapshot frequency."
            fi
            break
        fi
    done
fi

# writes property backup info to file
if [ $g_option_k_backup_property_mode -eq 1 ]; then
    write_backup_properties
fi

# exit with success
beep 0
exit 0
